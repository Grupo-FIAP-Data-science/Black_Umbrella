import streamlit as st
import requests
import plotly.express as px
from meteostat import Point, Daily
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="BlackUmbrella",
    page_icon="üå¶Ô∏è",
    layout="wide")

def dados_diarios():
    # Definir localiza√ß√£o (S√£o Paulo)
    latitude = -23.5505
    longitude = -46.6333

    # OpenWeatherMap API Key
    api_key = "eb27e58eb68d175624e79e4efed521eb"

    # URL para obter dados meteorol√≥gicos atuais
    url = f"http://api.openweathermap.org/data/2.5/weather?lat={latitude}&lon={longitude}&appid={api_key}&units=metric&lang=pt_br"

    # Solicitar dados
    response = requests.get(url)
    weather_data = response.json()

    # Extrair e formatar as informa√ß√µes
    weather_info = {
        "Temperatura": f"{weather_data['main']['temp']} ¬∞C",
        "Condi√ß√£o": weather_data['weather'][0]['description'].capitalize(),
        "Humidade": f"{weather_data['main']['humidity']}%",
        "Vento": f"{weather_data['wind']['speed']} m/s",
        "Dire√ß√£o do Vento": f"{weather_data['wind']['deg']}¬∞",
        "Press√£o": f"{weather_data['main']['pressure']} hPa",
        "Cobertura de Nuvens": f"{weather_data['clouds']['all']}%",
        "Precipita√ß√£o": weather_data.get('rain', {}).get('1h', 'N√£o dispon√≠vel')  # Precipita√ß√£o nas √∫ltimas 1 hora
    }

    # Adicionar t√≠tulo √† p√°gina
    st.title("Dados Di√°rios do Estado de SP")

    # Exibir informa√ß√µes meteorol√≥gicas
    st.subheader("Informa√ß√µes Meteorol√≥gicas Atuais")
    st.write(weather_info)

def dados_historicos():
    # Definir localiza√ß√£o (S√£o Paulo)
    latitude = -23.5505
    longitude = -46.6333
    location = Point(latitude, longitude)

    # Definir datas diretamente no c√≥digo
    start = datetime(2024, 8, 1)
    end = datetime(2024, 8, 31)

    # Obter dados di√°rios do Meteostat
    data = Daily(location, start, end).fetch()

    # Verificar se h√° dados dispon√≠veis para o per√≠odo selecionado
    if data.empty:
        st.warning("Nenhum dado dispon√≠vel para o per√≠odo selecionado.")
    else:
        # Remover valores ausentes NaN (Not a Number)
        data = data.dropna(axis=1)
        data = data.reset_index()

        # Criar gr√°ficos
        fig_line = px.line(data, x='time', y=['tavg', 'tmin', 'tmax'], labels={
            "value": "Temperatura (¬∞C)",
            "variable": "Tipo de Temperatura"
        })
        fig_line.update_layout(autosize=True, margin=dict(l=0, r=0, t=0, b=0))

        fig_bar = px.bar(data, x='time', y=['tavg', 'tmin', 'tmax'], labels={
            "value": "Temperatura (¬∞C)",
            "variable": "Tipo de Temperatura"
        })
        fig_bar.update_layout(autosize=True, margin=dict(l=0, r=0, t=0, b=0))

        fig_scatter = px.scatter(data, x='tmin', y='tmax', labels={
            "tmin": "Temperatura M√≠nima (¬∞C)",
            "tmax": "Temperatura M√°xima (¬∞C)"
        })
        fig_scatter.update_layout(autosize=True, margin=dict(l=0, r=0, t=0, b=0))

        fig_box = px.box(data, y=['tavg', 'tmin', 'tmax'], labels={
            "value": "Temperatura (¬∞C)",
            "variable": "Tipo de Temperatura"
        })
        fig_box.update_layout(autosize=True, margin=dict(l=0, r=0, t=0, b=0))

        fig_area = px.area(data, x='time', y=['tavg', 'tmin', 'tmax'], labels={
            "value": "Temperatura (¬∞C)",
            "variable": "Tipo de Temperatura"
        })
        fig_area.update_layout(autosize=True, margin=dict(l=0, r=0, t=0, b=0))

        # Adicionar t√≠tulo √† p√°gina
        st.title("Dados Hist√≥ricos do Estado de SP")

        # Usar container para organizar a tabela e os gr√°ficos
        with st.container():
            st.subheader("Tabela de Dados")
            st.dataframe(data, use_container_width=True)

            st.subheader("Gr√°fico de Linhas das Temperaturas")
            st.plotly_chart(fig_line, use_container_width=True)

            st.subheader("Gr√°fico de Barras das Temperaturas")
            st.plotly_chart(fig_bar, use_container_width=True)

            st.subheader("Gr√°fico de Dispers√£o das Temperaturas")
            st.plotly_chart(fig_scatter, use_container_width=True)

            st.subheader("Boxplot das Temperaturas")
            st.plotly_chart(fig_box, use_container_width=True)

            st.subheader("Gr√°fico de √Årea das Temperaturas")
            st.plotly_chart(fig_area, use_container_width=True)

# Definir o menu de navega√ß√£o
st.sidebar.title("Navega√ß√£o")
page = st.sidebar.radio("Escolha a P√°gina", ["Dados Di√°rios", "Dados Hist√≥ricos"])

# Carregar a p√°gina correspondente
if page == "Dados Di√°rios":
    dados_diarios()
elif page == "Dados Hist√≥ricos":
    dados_historicos()