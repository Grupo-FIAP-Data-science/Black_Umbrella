import pandas as pd
import streamlit as st
import requests
import plotly.express as px # type: ignore
import os
import folium
from meteostat import Point, Daily # type: ignore
from datetime import datetime
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderServiceError
from streamlit_folium import folium_static # type: ignore
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="BlackUmbrella",
    page_icon="üå¶Ô∏è",
    layout="wide"
)

# Estilos personalizados
st.markdown(
    """
    <style>
    body {
        background-color: rgb(255, 255, 240); /* Branco */
    }
    h1, h2, h3 {
        color: rgb(0, 0, 204); /* Azul */
    }
    .css-1d391kg {
        background-color: rgb(70, 70, 70); /* Cor da sidebar */
    }
    .metric {
        color: rgb(255, 215, 0); /* Amarelo */
    }
    .stButton>button {
        background-color: rgb(255, 215, 0); /* Amarelo */
        color: rgb(0, 0, 0); /* Preto */
    }
    .stDataFrame {
        color: rgb(70, 70, 70); /* Cinza */
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Carregar dados dos distritos
# df_distritos = pd.read_csv("dados/distritos_lat_lon.csv")

# Exibir logo na sidebar
st.sidebar.image("black_umbrella.jpeg", width=300)

# Adicionar filtro de distrito na barra lateral
st.sidebar.subheader("Navega√ß√£o")
# distrito_selecionado = st.sidebar.selectbox("Escolha um Distrito", df_distritos['Distrito'].unique())

# Adicionar a p√°gina "Avalia√ß√£o" √† barra lateral
page = st.sidebar.radio("Escolha a P√°gina", ["Dashboard", "Reportar Ocorr√™ncia", "Avalia√ß√£o do Usu√°rio"])
            
def pagina_avaliacao():
    st.title("Avalia√ß√£o do Sistema")

    # Campos adicionais
    nome = st.text_input("Seu Nome (opcional)")
    email = st.text_input("Seu E-mail (opcional)")
    data = datetime.now().strftime("%Y-%m-%d")

    # Avalia√ß√£o por m√∫ltiplos crit√©rios
    facilidade = st.slider("Facilidade de Uso", 0, 5, 3)
    qualidade_informacao = st.slider("Qualidade da Informa√ß√£o", 0, 5, 3)
    velocidade_resposta = st.slider("Velocidade de Resposta", 0, 5, 3)
    design = st.slider("Design/UX", 0, 5, 3)

    comentario = st.text_area("Coment√°rios adicionais", "")

    # Bot√£o para enviar avalia√ß√£o
    if st.button("Enviar Avalia√ß√£o"):
        st.success("Avalia√ß√£o enviada com sucesso!")

        # Salvar avalia√ß√£o em um arquivo CSV
        salvar_avaliacao(nome, email, data, facilidade, qualidade_informacao, velocidade_resposta, design, comentario)

# Fun√ß√£o para salvar avalia√ß√£o em um arquivo CSV (modificada para incluir novos campos)
def salvar_avaliacao(nome, email, data, facilidade, qualidade_informacao, velocidade_resposta, design, comentario):
    arquivo_csv = 'avaliacoes.csv'

    # Verifica se o arquivo j√° existe
    if not os.path.isfile(arquivo_csv):
        with open(arquivo_csv, 'w') as f:
            f.write('Nome,E-mail,Data,Facilidade,Qualidade,Velocidade,Design,Coment√°rio\n')

    # Adiciona a nova avalia√ß√£o ao arquivo
    with open(arquivo_csv, 'a') as f:
        f.write(f'{nome},"{email}","{data}",{facilidade},{qualidade_informacao},{velocidade_resposta},{design},"{comentario}"\n')

def dashboard():
    st.title("Boletins")

    # URL do relat√≥rio do Power BI gerado na incorpora√ß√£o
    power_bi_url = "https://app.powerbi.com/view?r=eyJrIjoiMzMyNmE1ZjUtODRlZS00MjQ1LTg2MDUtZGFiYjI4YzA3YTEyIiwidCI6IjU4YjBjYWY5LWFkZjUtNDQxNC1hOThlLTQyM2JlYjEzZGRkZCJ9"

    # Use st.components.v1.iframe para incorporar o relat√≥rio no Streamlit
    st.components.v1.iframe(power_bi_url, width=800, height=600)

# Fun√ß√£o para obter coordenadas de um endere√ßo
def get_coordinates(address):
    try:
        geolocator = Nominatim(user_agent="my_geocoder_app")
        location = geolocator.geocode(address)
        if location:
            return (location.latitude, location.longitude)
        return None
    except GeocoderServiceError as e:
        st.error(f"Erro ao acessar o servi√ßo de geocodifica√ß√£o: {e}")
        return None

# Fun√ß√£o para salvar a ocorr√™ncia em um arquivo CSV (pode ser adaptada para banco de dados)
def salvar_ocorrencia(nome, email, data, latitude, longitude, categoria, descricao, imagem):
    arquivo_csv = 'ocorrencias.csv'

    # Verifica se o arquivo j√° existe
    if not os.path.isfile(arquivo_csv):
        with open(arquivo_csv, 'w') as f:
            f.write('Nome,E-mail,Data,Latitude,Longitude,Categoria,Descri√ß√£o,Imagem\n')

    # Salva os dados no CSV
    with open(arquivo_csv, 'a') as f:
        f.write(f'{nome},{email},{data},{latitude},{longitude},{categoria},{descricao},{imagem}\n')

# Fun√ß√£o para indicar ocorr√™ncia
def pagina_ocorrencia():
    st.title("Indica√ß√£o de Ocorr√™ncia")

    # Campos de entrada de texto
    nome = st.text_input("Seu Nome (opcional)")
    email = st.text_input("Seu E-mail (opcional)")
    data = datetime.now().strftime("%Y-%m-%d")

    # Categoria da ocorr√™ncia
    categoria = st.selectbox(
        "Categoria da Ocorr√™ncia",
        ["Queda de √Årvore", "Alagamento", "Deslizamento", "Inunda√ß√£o", "Interrup√ß√£o do Fornecimento de Energia", "Outros"]
    )

    # Descri√ß√£o da ocorr√™ncia
    descricao = st.text_area("Descri√ß√£o da Ocorr√™ncia")

    # Endere√ßo para geolocaliza√ß√£o
    address = st.text_input("Digite o endere√ßo (Rua, Cidade, Estado):")
    
    # Se o usu√°rio fornecer um endere√ßo
    if address:
        # Obtenha as coordenadas
        coordinates = get_coordinates(address)
        
        if coordinates:
            latitude, longitude = coordinates
            # Exibir coordenadas automaticamente
            st.write(f"**Coordenadas**: {latitude}, {longitude}")
            
            # Crie o mapa centrado nas coordenadas encontradas
            m = folium.Map(location=coordinates, zoom_start=15)
            # Adicione um marcador no endere√ßo
            folium.Marker(coordinates, popup=address).add_to(m)
            # Renderize o mapa no Streamlit
            folium_static(m)
        else:
            st.error("Endere√ßo n√£o encontrado ou erro ao acessar o servi√ßo.")
    
    # Upload de imagem (opcional)
    imagem = st.file_uploader("Anexar uma imagem (opcional)", type=["jpg", "jpeg", "png"])

    # Bot√£o para enviar ocorr√™ncia
    if st.button("Enviar Ocorr√™ncia"):
        if coordinates:
            st.success("Ocorr√™ncia enviada com sucesso!")
            # Salvar ocorr√™ncia em um arquivo CSV
            salvar_ocorrencia(nome, email, data, latitude, longitude, categoria, descricao, imagem)
        else:
            st.error("N√£o foi poss√≠vel enviar a ocorr√™ncia. Verifique o endere√ßo.")

if page == "Dashboard":
    dashboard()

elif page == "Reportar Ocorr√™ncia":
    pagina_ocorrencia()

elif page == "Avalia√ß√£o do Usu√°rio":
    pagina_avaliacao()